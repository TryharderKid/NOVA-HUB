-- Create a language selection UI before loading the main script
local function CreateLanguageSelectionUI()
    -- Define available languages with their native names
    local AvailableLanguages = {
        ["English"] = "English",
        ["Spanish"] = "Español",
        ["Portuguese"] = "Português",
        ["French"] = "Français",
        ["German"] = "Deutsch",
        ["Italian"] = "Italiano",
        ["Russian"] = "Русский",
        ["Chinese"] = "中文",
        ["Japanese"] = "日本語",
        ["Korean"] = "한국어",
        ["Thai"] = "ไทย"
    }
    
    -- Create a ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "LanguageSelector"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.DisplayOrder = 999
    
    -- Create the main frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 300, 0, 350)
    MainFrame.Position = UDim2.new(0.5, -150, 0.5, -175)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    -- Add corner radius
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = MainFrame
    
    -- Create title
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, 0, 0, 50)
    Title.Position = UDim2.new(0, 0, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = "Select Language"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 24
    Title.Font = Enum.Font.GothamBold
    Title.Parent = MainFrame
    
    -- Create subtitle
    local Subtitle = Instance.new("TextLabel")
    Subtitle.Name = "Subtitle"
    Subtitle.Size = UDim2.new(1, 0, 0, 30)
    Subtitle.Position = UDim2.new(0, 0, 0, 40)
    Subtitle.BackgroundTransparency = 1
    Subtitle.Text = "Choose your preferred language"
    Subtitle.TextColor3 = Color3.fromRGB(200, 200, 200)
    Subtitle.TextSize = 16
    Subtitle.Font = Enum.Font.Gotham
    Subtitle.Parent = MainFrame
    
    -- Create scroll frame for languages
    local ScrollFrame = Instance.new("ScrollingFrame")
    ScrollFrame.Name = "ScrollFrame"
    ScrollFrame.Size = UDim2.new(0.9, 0, 0, 200)
    ScrollFrame.Position = UDim2.new(0.05, 0, 0, 80)
    ScrollFrame.BackgroundTransparency = 1
    ScrollFrame.BorderSizePixel = 0
    ScrollFrame.ScrollBarThickness = 6
    ScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be set dynamically
    ScrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Enable automatic canvas sizing
    ScrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    ScrollFrame.ScrollingEnabled = true
    ScrollFrame.Parent = MainFrame
    
    -- Create UIListLayout for organizing language buttons
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Padding = UDim.new(0, 8)
    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Parent = ScrollFrame
    
    -- Add padding to the scroll frame
    local UIPadding = Instance.new("UIPadding")
    UIPadding.PaddingTop = UDim.new(0, 5)
    UIPadding.PaddingBottom = UDim.new(0, 5)
    UIPadding.Parent = ScrollFrame
    
    -- Selected language
    local SelectedLanguage = "English"
    
    -- Function to create language buttons
    local function CreateLanguageButton(language, nativeName, index)
        local Button = Instance.new("TextButton")
        Button.Name = language
        Button.Size = UDim2.new(0.95, 0, 0, 35)
        Button.LayoutOrder = index
        Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        Button.Text = nativeName
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextSize = 18
        Button.Font = Enum.Font.Gotham
        Button.Parent = ScrollFrame
        
        -- Add corner radius to button
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 6)
        ButtonCorner.Parent = Button
        
        -- Add hover effect
        Button.MouseEnter:Connect(function()
            Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        end)
        
        Button.MouseLeave:Connect(function()
            if SelectedLanguage ~= language then
                Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            else
                Button.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
            end
        end)
        
        -- Add click event
        Button.MouseButton1Click:Connect(function()
            -- Update selected language
            SelectedLanguage = language
            
            -- Update button colors
            for _, child in pairs(ScrollFrame:GetChildren()) do
                if child:IsA("TextButton") then
                    if child.Name == language then
                        child.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
                    else
                        child.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                    end
                end
            end
        end)
        
        -- Set initial state if this is the default language
        if language == SelectedLanguage then
            Button.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
        end
        
        return Button
    end
    
    -- Create buttons for each language
    local index = 1
    for language, nativeName in pairs(AvailableLanguages) do
        CreateLanguageButton(language, nativeName, index)
        index = index + 1
    end
    
    -- Create confirm button
    local ConfirmButton = Instance.new("TextButton")
    ConfirmButton.Name = "ConfirmButton"
    ConfirmButton.Size = UDim2.new(0.8, 0, 0, 40)
    ConfirmButton.Position = UDim2.new(0.1, 0, 1, -60)
    ConfirmButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    ConfirmButton.Text = "Confirm"
    ConfirmButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ConfirmButton.TextSize = 18
    ConfirmButton.Font = Enum.Font.GothamBold
    ConfirmButton.Parent = MainFrame
    
    -- Add corner radius to confirm button
    local ConfirmCorner = Instance.new("UICorner")
    ConfirmCorner.CornerRadius = UDim.new(0, 6)
    ConfirmCorner.Parent = ConfirmButton
    
    -- Add hover effect to confirm button
    ConfirmButton.MouseEnter:Connect(function()
        ConfirmButton.BackgroundColor3 = Color3.fromRGB(0, 100, 180)
    end)
    
    ConfirmButton.MouseLeave:Connect(function()
        ConfirmButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    end)
    
    -- Add scrolling instructions
    local ScrollInstructions = Instance.new("TextLabel")
    ScrollInstructions.Name = "ScrollInstructions"
    ScrollInstructions.Size = UDim2.new(0.8, 0, 0, 20)
    ScrollInstructions.Position = UDim2.new(0.1, 0, 1, -90)
    ScrollInstructions.BackgroundTransparency = 1
    ScrollInstructions.Text = "Scroll to see more languages"
    ScrollInstructions.TextColor3 = Color3.fromRGB(180, 180, 180)
    ScrollInstructions.TextSize = 14
    ScrollInstructions.Font = Enum.Font.Gotham
    ScrollInstructions.Parent = MainFrame
    
    -- Parent the ScreenGui to the right place
    if syn and syn.protect_gui then
        syn.protect_gui(ScreenGui)
        ScreenGui.Parent = game:GetService("CoreGui")
    elseif gethui then
        ScreenGui.Parent = gethui()
    else
        ScreenGui.Parent = game:GetService("CoreGui")
    end
    
    -- Return a promise-like function that resolves with the selected language
    return function()
        local selectedLang = nil
        
        -- Set up the confirm button click event
        ConfirmButton.MouseButton1Click:Connect(function()
            selectedLang = SelectedLanguage
            ScreenGui:Destroy()
        end)
        
        -- Wait for the user to select a language
        while not selectedLang do
            wait(0.1)
        end
        
        return selectedLang
    end
end

-- Wait for language selection before loading the main script
local GetSelectedLanguage = CreateLanguageSelectionUI()
local SelectedLanguage = GetSelectedLanguage()

-- Now load the main script with the selected language
-- Load the library and managers
local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

-- Define all available languages
local Languages = {
    English = {
        title = "Lurnai",
        subtitle = "Private Script",
        -- Tab titles
        home = "Home",
        main = "Main",
        rebirths = "Rebirths",
        killer = "Killer",
        crystal = "Crystal",
        status = "Status",
        miscellaneous = "Miscellaneous",
        settings = "Settings",
        language = "Language",
        -- Other translations
        scriptLoaded = "The script has been loaded."
    },
    Spanish = {
        title = "Lurnai",
        subtitle = "Script Privado",
        -- Tab titles
        home = "Inicio",
        main = "Principal",
        rebirths = "Renacimientos",
        killer = "Asesino",
        crystal = "Cristal",
        status = "Estado",
        miscellaneous = "Misceláneos",
        settings = "Ajustes",
        language = "Idioma",
        -- Other translations
        scriptLoaded = "El script ha sido cargado."
    },
    Portuguese = {
        title = "Lurnai",
        subtitle = "Script Privado",
        -- Tab titles
        home = "Início",
        main = "Principal",
        rebirths = "Renascimentos",
        killer = "Assassino",
        crystal = "Cristal",
        status = "Estado",
        miscellaneous = "Diversos",
        settings = "Configurações",
        language = "Idioma",
        -- Other translations
        scriptLoaded = "O script foi carregado."
    },
    French = {
        title = "Lurnai",
        subtitle = "Script Privé",
        -- Tab titles
        home = "Accueil",
        main = "Principal",
        rebirths = "Renaissances",
        killer = "Tueur",
        crystal = "Cristal",
        status = "Statut",
        miscellaneous = "Divers",
        settings = "Paramètres",
        language = "Langue",
        -- Other translations
        scriptLoaded = "Le script a été chargé."
    },
    German = {
        title = "Lurnai",
        subtitle = "Privates Skript",
        -- Tab titles
        home = "Startseite",
        main = "Hauptmenü",
        rebirths = "Wiedergeburten",
        killer = "Killer",
        crystal = "Kristall",
        status = "Status",
        miscellaneous = "Verschiedenes",
        settings = "Einstellungen",
        language = "Sprache",
        -- Other translations
        scriptLoaded = "Das Skript wurde geladen."
    },
    Italian = {
        title = "Lurnai",
        subtitle = "Script Privato",
        -- Tab titles
        home = "Home",
        main = "Principale",
        rebirths = "Rinascite",
        killer = "Killer",
        crystal = "Cristallo",
        status = "Stato",
        miscellaneous = "Varie",
        settings = "Impostazioni",
        language = "Lingua",
        -- Other translations
        scriptLoaded = "Lo script è stato caricato."
    },
    Russian = {
        title = "Lurnai",
        subtitle = "Частный Скрипт",
        -- Tab titles
        home = "Главная",
        main = "Основное",
        rebirths = "Перерождения",
        killer = "Убийца",
        crystal = "Кристалл",
        status = "Статус",
        miscellaneous = "Разное",
        settings = "Настройки",
        language = "Язык",
        -- Other translations
        scriptLoaded = "Скрипт загружен."
    },
    Chinese = {
        title = "Lurnai",
        subtitle = "私人脚本",
        -- Tab titles
        home = "首页",
        main = "主要",
        rebirths = "重生",
        killer = "杀手",
        crystal = "水晶",
        status = "状态",
        miscellaneous = "杂项",
        settings = "设置",
        language = "语言",
        -- Other translations
        scriptLoaded = "脚本已加载。"
    },
    Japanese = {
        title = "Lurnai",
        subtitle = "プライベートスクリプト",
        -- Tab titles
        home = "ホーム",
        main = "メイン",
        rebirths = "リバース",
        killer = "キラー",
        crystal = "クリスタル",
        status = "ステータス",
        miscellaneous = "その他",
        settings = "設定",
        language = "言語",
        -- Other translations
        scriptLoaded = "スクリプトが読み込まれました。"
    },
    Korean = {
        title = "Lurnai",
        subtitle = "비공개 스크립트",
        -- Tab titles
        home = "홈",
        main = "메인",
        rebirths = "환생",
        killer = "킬러",
        crystal = "크리스탈",
        status = "상태",
        miscellaneous = "기타",
        settings = "설정",
        language = "언어",
        -- Other translations
        scriptLoaded = "스크립트가 로드되었습니다."
    },
    Thai = {
        title = "Lurnai",
        subtitle = "สคริปต์ส่วนตัว",
        -- Tab titles
        home = "หน้าหลัก",
        main = "หลัก",
        rebirths = "การเกิดใหม่",
        killer = "นักฆ่า",
        crystal = "คริสตัล",
        status = "สถานะ",
        miscellaneous = "เบ็ดเตล็ด",
        settings = "การตั้งค่า",
        language = "ภาษา",
        -- Other translations
        scriptLoaded = "โหลดสคริปต์แล้ว"
    }
}

-- Set default language to the one selected in the pre-script UI
local CurrentLanguage = SelectedLanguage

-- Function to get translated text
function GetTranslation(key)
    if Languages[CurrentLanguage] and Languages[CurrentLanguage][key] then
        return Languages[CurrentLanguage][key]
    else
        -- Fallback to English if translation is missing
        return Languages["English"][key] or key
    end
end

-- Load saved language preference if available
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({"LanguageSelector"})
InterfaceManager:SetFolder("LurnaiUpdate")
SaveManager:SetFolder("LurnaiUpdate")
SaveManager:Load()

-- Create the window
local Window = Library:CreateWindow{
    Title = GetTranslation("title"),
    SubTitle = GetTranslation("subtitle"),
    TabWidth = 160,
    Size = UDim2.fromOffset(830, 525),
    Resize = true,
    MinSize = Vector2.new(470, 380),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl
}

-- Create all tabs with translated titles
local Tabs = {
    Home = Window:CreateTab{
        Title = GetTranslation("home"),
        Icon = "home"
    },
    Main = Window:CreateTab{
        Title = GetTranslation("main"),
        Icon = "phosphor-users-bold"
    },
    Rebirths = Window:CreateTab{
        Title = GetTranslation("rebirths"),
        Icon = "refresh-cw"
    },
    Killer = Window:CreateTab{
        Title = GetTranslation("killer"),
        Icon = "skull"
    },
    Crystal = Window:CreateTab{
        Title = GetTranslation("crystal"),
        Icon = "gem"
    },
    Status = Window:CreateTab{
        Title = GetTranslation("status"),
        Icon = "activity"
    },
    Miscellaneous = Window:CreateTab{
        Title = GetTranslation("miscellaneous"),
        Icon = "more-horizontal"
    },
    Settings = Window:CreateTab{
        Title = GetTranslation("settings"),
        Icon = "settings"
    }
}

-- Create a language section in the Settings tab
local LanguageSection = Tabs.Settings:CreateSection(GetTranslation("language"))

-- Create a dropdown for language selection
local LanguageDropdown = Tabs.Settings:CreateDropdown("LanguageSelector", {
    Title = GetTranslation("language"),
    Values = {"English", "Spanish", "Portuguese", "French", "German", "Italian", "Russian", "Chinese", "Japanese", "Korean", "Thai"},
    Multi = false,
    Default = CurrentLanguage,
    Callback = function(Value)
        if Value ~= CurrentLanguage then
            CurrentLanguage = Value
            
            -- Save the language preference
            SaveManager:Save()
            
            -- Notify the user that they need to restart the script
            Library:Notify{
                Title = "Language Changed",
                Content = "Please restart the script to apply the new language.",
                Duration = 5
            }
        end
    end
})

-- Add interface management options and config section
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Select the first tab by default
Window:SelectTab(1)

-- Show a notification that the script has loaded
Library:Notify{
    Title = GetTranslation("title"),
    Content = GetTranslation("scriptLoaded"),
    Duration = 5
}

-- Load autoload config if available
SaveManager:LoadAutoloadConfig()
